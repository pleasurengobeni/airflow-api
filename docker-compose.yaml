services:
  # Airflow Postgres Database
  airflow-db:
    image: postgres:14
    container_name: airflow_postgres
    environment:
      POSTGRES_USER: ${AIRFLOW_DB_USER}
      POSTGRES_PASSWORD: ${AIRFLOW_DB_PASSWORD}
      POSTGRES_DB: ${AIRFLOW_DB}
    volumes:
      - airflow_db_data:/var/lib/postgresql/data
    networks:
      - airflow-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIRFLOW_DB_USER}", "-d", "${AIRFLOW_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  # Datalake Postgres Database
  datalake_postgres:
    image: postgres:14
    container_name: datalake_postgres
    environment:
      POSTGRES_USER: ${DATALAKE_DB_USER}
      POSTGRES_PASSWORD: ${DATALAKE_DB_PASSWORD}
      POSTGRES_DB: ${DATALAKE_DB}
    ports:
      - "${DATALAKE_PORT}:5432"
    command: >
      bash -c "
        chmod +x /datalake_init.sh &&  # Ensure the script is executable
        /datalake_init.sh  # Run the initialization script
      "
    networks:
      - airflow-network

  # Airflow Init (Initializes Airflow DB, Creates User, etc.)
  airflow-init:
    image: apache/airflow:2.7.0
    container_name: airflow_init
    depends_on:
      airflow-db:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-db:5432/${AIRFLOW_DB}
    env_file:
      - .env
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: >
      bash -c "airflow db init &&
             airflow users create --username ${AIRFLOW_WEB_USER} --password ${AIRFLOW_WEB_PWD} --firstname Admin --lastname User --role Admin --email ngobeni.pleasure@gmail.com"
    networks:
      - airflow-network
    healthcheck:
      test: ["CMD", "airflow", "db", "check"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 30s

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.7.0
    container_name: airflow_scheduler
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-db:5432/${AIRFLOW_DB}
    env_file:
      - .env
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: "airflow scheduler"
    networks:
      - airflow-network
    depends_on:
      - airflow-init

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.0
    container_name: airflow_webserver
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__CORE__FERNET_KEY: ${FERNET_KEY}
      AIRFLOW__CORE__DAGS_FOLDER: /opt/airflow/dags
      AIRFLOW__CORE__LOAD_EXAMPLES: "False"
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_DB_USER}:${AIRFLOW_DB_PASSWORD}@airflow-db:5432/${AIRFLOW_DB}
    env_file:
      - .env
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
      - ./api_dump:/opt/airflow/api_dump
    command: "airflow webserver"
    networks:
      - airflow-network
    ports:
      - "8080:8080"
    depends_on:
      - airflow-init
      - airflow-scheduler
      
# pgAdmin for Database Management
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "8081:80"  # Expose pgAdmin on port 8081
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - airflow-network
    depends_on:
      - datalake_postgres
      - airflow-db

volumes:
  airflow_db_data:
    driver: local
  datalake_db_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  airflow-network:
    driver: bridge